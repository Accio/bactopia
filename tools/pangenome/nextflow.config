// main script name
manifest {
    author = 'Robert A. Petit III'
    name = 'pangenome'
    homePage = 'https://github.com/bactopia/bactopia'
    description = 'Create a pan-genome with optional core-genome phylogeny.'
    mainScript = 'main.nf'
    version = '1.2.2'
    nextflowVersion = '>=19'
}

// Includes
includeConfig "${baseDir}/conf/params.config"
includeConfig "${baseDir}/conf/base.config"
includeConfig "${baseDir}/conf/profiles.config"

// Reporting configuration
timeline {
    enabled = true
    file = "${params.infodir}/${manifest.name}-timeline.html"
}

report {
    enabled = true
    file = "${params.infodir}/${manifest.name}-report.html"
}

trace {
    enabled = true
    file = "${params.infodir}/${manifest.name}-trace.txt"
    fields = 'task_id,hash,native_id,process,tag,name,status,exit,module,container,cpus,time,disk,memory,attempt,start,complete,duration,realtime,queue,%cpu,%mem,rss,vmem'
}


// Function to ensure that resource requirements don't go beyond a maximum limit
// Source: https://github.com/nf-core/rnaseq/blob/master/nextflow.config
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            max_memory = (params.max_memory).GB
            if (obj.compareTo(max_memory as nextflow.util.MemoryUnit) == 1)
                return max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "ERROR - Max memory '${params.max_memory} GB' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            max_time = (params.max_time).m
            if (obj.compareTo(max_time as nextflow.util.Duration) == 1)
                return max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "ERROR - Max time '${params.max_time} minutes' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min(obj, params.cpus as int)
        } catch (all) {
            println "ERROR - Max cpus '${params.cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
