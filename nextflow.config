// main script name
manifest {
    author = 'Robert A. Petit III'
    name = 'bactopia'
    homePage = 'https://github.com/bactopia/bactopia'
    description = 'An extensive workflow for processing Illumina sequencing of bacterial genomes.'
    mainScript = 'main.nf'
    version = '1.4.8'
    nextflowVersion = '>=19'
}

// Set container/conda env version
container_version = '1.4.x'

// Includes
includeConfig "${baseDir}/conf/params.config"
includeConfig "${baseDir}/conf/base.config"
includeConfig "${baseDir}/conf/profiles.config"

if (params.nfconfig) {
    includeConfig check_path(params.nfconfig)
}

if (!params.conda_help) {
// Reporting configuration
    timeline {
        enabled = true
        file = "${params.infodir}/bactopia-timeline.html"
    }

    report {
        enabled = true
        file = "${params.infodir}/bactopia-report.html"
    }

    trace {
        enabled = true
        file = "${params.infodir}/bactopia-trace.txt"
        fields = 'task_id,hash,native_id,process,tag,name,status,exit,module,container,cpus,time,disk,memory,attempt,start,complete,duration,realtime,queue,%cpu,%mem,rss,vmem'
    }
}



// Process configuration
process.ext.template = {"${task.process}.sh"}

// Function to ensure that resource requirements don't go beyond a maximum limit
// Source: https://github.com/nf-core/rnaseq/blob/master/nextflow.config
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            max_memory = (params.max_memory).GB
            if (obj.compareTo(max_memory as nextflow.util.MemoryUnit) == 1)
                return max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "ERROR - Max memory '${params.max_memory} GB' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            max_time = (params.max_time).m
            if (obj.compareTo(max_time as nextflow.util.Duration) == 1)
                return max_time as nextflow.util.Duration
            else
            return obj
        } catch (all) {
            println "ERROR - Max time '${params.max_time} minutes' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min(obj, params.cpus as int)
        } catch (all) {
            println "ERROR - Max cpus '${params.cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

def check_path(file_path) {
    // Try relative first
    launchDir = System.properties['user.dir']
    relative_path = "${launchDir}/${file_path}"
    File file_obj = new File(relative_path)
    if (file_obj.exists()) {
        return relative_path
    } else {
        // Try as absolute path
        file_obj = new File(file_path)
        if (file_obj.exists()) {
            return file_path
        } else {
            println "ERROR - Unable to locate '${params.nfconfig}' please check it exists"
        }
    }
}
