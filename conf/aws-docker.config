process {
    withName: 'annotate_genome|make_blastdb|blast_genes|blast_primers|blast_proteins|plasmid_blast' {
        container = "bactopia/aws-annotate_genome:${container_version}"
    }
    withName: 'update_antimicrobial_resistance|antimicrobial_resistance' {
        container = "bactopia/aws-antimicrobial_resistance:${container_version}"
    }
    withName: ariba_analysis {
        container = "bactopia/aws-ariba_analysis:${container_version}"
    }
    withName: assemble_genome {
        container = "bactopia/aws-assemble_genome:${container_version}"
    }
    withName: assembly_qc {
        container = "bactopia/aws-assembly_qc:${container_version}"
    }
    withName: 'call_variants|call_variants_auto|mapping_query' {
        container = "bactopia/aws-call_variants:${container_version}"
    }
    withName: count_31mers {
        memory = {check_max(9.GB * task.attempt, MAX_MEMORY, 'memory')}
        container = "bactopia/aws-count_31mers:${container_version}"
    }
    withName: download_references {
        container = "bactopia/aws-download_references:${container_version}"
    }
    withName: 'estimate_genome_size|minmer_sketch|minmer_query' {
        container = "bactopia/aws-minmers:${container_version}"
    }
    withName: 'gather_fastqs' {
        container = "bactopia/aws-gather_fastqs:${container_version}"
    }
    withName: 'fastq_status|qc_reads|qc_original_summary|qc_final_summary' {
        container = "bactopia/aws-qc_reads:${container_version}"
    }
    withName: sequence_type {
        container = "bactopia/aws-sequence_type:${container_version}"
    }

    // Resource mods
    withName: 'fastq_status|qc_original_summary|qc_final_summary|mapping_query' {
        memory = {check_max(2.GB * task.attempt, MAX_MEMORY, 'memory' )}
    }

    withName: 'mapping_query' {
        memory = {check_max(3.GB * task.attempt, MAX_MEMORY, 'memory' )}
    }

    withName: qc_reads {
        memory = {check_max(16.GB * task.attempt, MAX_MEMORY, 'memory')}
    }

    withName: 'assemble_genome|assembly_qc' {
        memory = {check_max(32.GB * task.attempt, MAX_MEMORY, 'memory' )}
    }

    maxRetries = 4
}
docker.enabled = true
docker.runOptions = '-u $(id -u):$(id -g)'
