process {
    // Defaults
    cpus = {check_max(1, MAX_CPUS, 'cpus' )}
    memory = {check_max(1.GB * task.attempt, MAX_MEMORY, 'memory' )}
    time = {check_max( 60.m * task.attempt, (params.max_time).m, 'time' )}
    errorStrategy = 'retry'
    maxRetries = 1

    // Full cpus
    withName: 'annotate_genome|antimicrobial_resistance|blast_genes|blast_primers|blast_proteins|mapping_query' {
        cpus = {check_max('request', MAX_CPUS, 'cpus')}
    }

    // Half cpus
    withName: 'qc_original_summary|qc_final_summary' {
        cpus = {check_max('request', MAX_CPUS_50, 'cpus' )}
    }

    withName: plasmid_blast {
        cpus = {check_max('request', MAX_CPUS, 'cpus' )}
        memory = 3.GB
    }

    withName: ariba_analysis {
        cpus = {task.attempt > 1 ? 1 : check_max('request', MAX_CPUS_75, 'cpus')}
        maxRetries = 1
        memory = {check_max(2.GB * task.attempt, MAX_MEMORY, 'memory' )}
        errorStrategy = { task.attempt > 1 && task.exitStatus == 1 ? 'ignore' : 'retry' }
    }

    withName: qc_reads {
        cpus = {check_max('request', MAX_CPUS, 'cpus' )}
        maxRetries = 4
        memory = {check_max(((params.qc_ram).GB * task.attempt), MAX_MEMORY, 'memory')}
    }

    withName: 'assemble_genome|assembly_qc' {
        cpus = {check_max('request', MAX_CPUS_75, 'cpus' )}
        memory = { sample_type == 'hybrid' ? check_max(((params.unicycler_ram).GB * task.attempt), MAX_MEMORY, 'memory') : check_max(((params.shovill_ram).GB * task.attempt), MAX_MEMORY, 'memory')}
        time = { sample_type == 'hybrid' ? check_max( 120.m * task.attempt, (params.max_time).m, 'time' ) : check_max( 30.m * task.attempt, (params.max_time).m, 'time' )}
        maxRetries = 4
    }

    withName: 'call_variants|call_variants_auto' {
        cpus = {check_max('request', MAX_CPUS_75, 'cpus' )}
        errorStrategy = 'retry'
        maxRetries = 3
        memory = {check_max(((params.snippy_ram).GB * task.attempt), MAX_MEMORY, 'memory')}
    }

    withName: count_31mers {
        cpus = {check_max('request', MAX_CPUS, 'cpus' )}
        errorStrategy = 'retry'
        maxRetries = 4
        memory = {check_max(((params.cortex_ram).GB * task.attempt), MAX_MEMORY, 'memory')}
    }

    withName: minmer_query {
        cpus = {check_max( 'request', MAX_CPUS, 'cpus' )}
        errorStrategy = 'retry'
        maxRetries = Math.round(params.max_memory / params.minmer_ram)
        memory = {check_max(((params.minmer_ram).GB * task.attempt), MAX_MEMORY, 'memory')}
    }

    withName: download_references {
        errorStrategy = 'retry'
        maxRetries = 6
        errorStrategy = { task.attempt > 5 && task.exitStatus == 75 ? 'ignore' : 'retry' }
    }

    withName: 'gather_fastqs' {
        cpus = {check_max(4, MAX_CPUS, 'cpus')}
        errorStrategy = 'retry'
        maxForks = params.max_downloads
        maxRetries = 20
    }

    withName: sequence_type {
        errorStrategy = 'retry'
        maxRetries = 5
    }
}
